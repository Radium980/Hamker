from pymongo import MongoClient
from config import MONGO_DB_URI
import asyncio
import random
import os

from pyrogram import filters
from pyrogram.enums import ChatType
from pyrogram.types import InlineKeyboardMarkup, Message, InlineKeyboardButton, CallbackQuery
from src import app

DATABASE = MongoClient(MONGO_DB_URI)
db = DATABASE["MAIN"]["USERS"]
collection = db["members"]

def add_user_database(user_id: int):
    check_user = collection.find_one({"user_id": user_id})
    if not check_user:
        return collection.insert_one({"user_id": user_id})

@app.on_message(filters.command("help"))
async def unxhelp(_, msg: Message):
    await msg.reply_photo("https://graph.org/file/657de4d577cc73f6832d4.jpg", caption=f"""‚ûª  ú·¥á Ä·¥á …™s ·¥õ ú·¥á  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú ·¥è“ì {app.me.mention} :""", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text="·¥Ä…™", callback_data="unx_ai"), InlineKeyboardButton(text="…™·¥ç·¥Ä…¢·¥á ·¥Ä…™", callback_data="unx_imageai"), InlineKeyboardButton(text="·¥ç…™·¥Ö ·¥Ä…™", callback_data="unx_midai")],
            [InlineKeyboardButton(text="·¥á·¥Ö…™·¥õ·¥ç·¥è·¥Ö·¥á", callback_data="unx_editmode"), InlineKeyboardButton(text="·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á", callback_data="unx_belcome"), InlineKeyboardButton(text="«´·¥è·¥ú·¥õ ü è", callback_data="unx_qoutly")],
            [InlineKeyboardButton(text="…™·¥ç…¢", callback_data="unx_img"), InlineKeyboardButton(text="·¥ò…™…¥…¢", callback_data="unx_ping"), InlineKeyboardButton(text="“ì…™…¢ ü·¥á·¥õ", callback_data="unx_figlet")],
            [InlineKeyboardButton(text="s ú·¥è Ä·¥õ ·¥ú Ä ü", callback_data="unx_shorturl"), InlineKeyboardButton(text="s…¥·¥Ä·¥ç·¥á", callback_data="unx_sname"), InlineKeyboardButton(text="·¥°·¥á ôss", callback_data="unx_webss")],
            [InlineKeyboardButton(text=" è·¥è·¥ú·¥õ·¥ú ô·¥á", callback_data="unx_yt"), InlineKeyboardButton(text="·¥Ä ü…™·¥†·¥á", callback_data="unx_alive"), InlineKeyboardButton(text="s·¥è…¥…¢", callback_data="ux_song")],
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="go_back_to_start"), InlineKeyboardButton(text="·¥á·¥Ñ ú·¥è", callback_data="unx_echo")]]))
        

@app.on_callback_query(filters.regex("unx_ai"))
async def cb_func_ai(_, query: CallbackQuery):
    await query.message.edit_text(text=f"‚Ü¨ /ai : ·¥úÍú±·¥á Íú∞ Ä·¥á·¥á ·¥Ä…™ ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥Ä·¥ò…™ ·¥ã·¥á è.\n‚Ü¨ ·¥õ Ä è /ai hi", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))
    
@app.on_callback_query(filters.regex("unx_belcome"))
async def cb_func_belcome(_, query: CallbackQuery):
    await query.message.edit_text(text=f"‚Ü¨ /welcome : ·¥è…¥/·¥èÍú∞Íú∞ ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥á·¥ç·¥ò ü·¥Ä·¥õ·¥á Íú∞·¥è Ä ·¥°·¥á ü·¥Ñ·¥è·¥ç…™…¥…¢ …¥·¥á·¥° ·¥ç·¥á·¥ç ô·¥á ÄÍú± …™…¥ …¢ Ä·¥è·¥ú·¥ò.\n‚Ü¨ ·¥õ Ä è /welcome on/off", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))
        
@app.on_callback_query(filters.regex("unx_imageai"))
async def cb_func_imageai(_, query: CallbackQuery):
    await query.message.edit_text(text=f"‚Ü¨ /imagine : …¢…™·¥†·¥á ·¥ò Ä·¥è·¥ç·¥ò·¥õ ·¥õ·¥è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á ùüæ·¥ã ·¥Ä…™ …™·¥ç·¥Ä…¢·¥ás.\n‚Ü¨ ·¥õ Ä è /imagine sunset view", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))

@app.on_callback_query(filters.regex("unx_midai"))
async def cb_func_midai(_, query: CallbackQuery):
    await query.message.edit_text(text=f"‚Ü¨ /mid : …¢…™·¥†·¥á ·¥ò Ä·¥è·¥ç·¥ò·¥õ ·¥õ·¥è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á ·¥ç…™·¥Ö ·¥Ä…™ …™·¥ç·¥Ä…¢·¥ás.\n‚Ü¨ ·¥õ Ä è /mid a boy", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))

@app.on_callback_query(filters.regex("unx_alive"))
async def cb_func_alive(_, query: CallbackQuery):
    await query.message.edit_text(text="‚Ü¨ /alive : s ú·¥è·¥°s ·¥õ ú·¥á ·¥Ä ü…™·¥†·¥á s·¥õ·¥Ä·¥õ·¥ús ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))

@app.on_callback_query(filters.regex("unx_echo"))
async def cb_func_imageai(_, query: CallbackQuery):
    await query.message.edit_text(text=f"‚Ü¨ /echo : s·¥á…¥·¥Ös ·¥õ ú·¥á …¢…™·¥†·¥á…¥ ·¥õ·¥áx·¥õ.\n‚Ü¨ ·¥õ Ä è /echo hi", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))
    
@app.on_callback_query(filters.regex("unx_figlet"))
async def cb_func_figlet(_, query: CallbackQuery):
    await query.message.edit_text(text="‚Ü¨ /figlet : …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥ás ·¥Ä “ì…™…¢ ü·¥á·¥õ ·¥è“ì …¢…™·¥†·¥á…¥ …¥·¥Ä·¥ç·¥á.\n‚Ü¨ ·¥õ Ä è /figlet hi", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))

@app.on_callback_query(filters.regex("unx_img"))
async def cb_func_img(_, query: CallbackQuery):
    await query.message.edit_text(text="‚Ü¨ /img : s ú·¥è·¥°s …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥õ ú·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö …™·¥ç·¥Ä…¢·¥á.", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))

@app.on_callback_query(filters.regex("unx_ping"))
async def cb_func_ping(_, query: CallbackQuery):
    await query.message.edit_text(text="‚Ü¨ /ping : s ú·¥è·¥°s ·¥õ ú·¥á ·¥ò…™…¥…¢  ü·¥Ä·¥õ·¥á…¥·¥Ñ è ·¥Ä…¥·¥Ö s ès·¥õ·¥á·¥ç s·¥õ·¥Ä·¥õs ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ.", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))

@app.on_callback_query(filters.regex("unx_qoutly"))
async def cb_func_qoutly(_, query: CallbackQuery):
    await query.message.edit_text(text="‚Ü¨ /q : ·¥ç·¥Ä·¥ã·¥á's ·¥Ä «´·¥ú·¥è·¥õ·¥á ·¥è“ì ·¥õ ú·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á.\n(Íú±·¥õ…™ ü ü ·¥°·¥è Ä·¥ã…™…¥…¢)", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))

@app.on_callback_query(filters.regex("unx_shorturl"))
async def cb_func_shorturl(_, query: CallbackQuery):
    await query.message.edit_text(text="‚Ü¨ /shorturl : s ú·¥è Ä·¥õ·¥á…¥s ·¥õ ú·¥á …¢…™·¥†·¥á…¥ ·¥ú Ä ü.\n‚Ü¨ ·¥õ Ä è /shorturl google.com", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))
    
@app.on_callback_query(filters.regex("unx_sname"))
async def cb_func_sname(_, query: CallbackQuery):
    await query.message.edit_text(text="‚Ü¨ /sname : ·¥Ö·¥á·¥Ñ·¥è·¥Ö·¥ás ·¥õ ú·¥á …¥·¥Ä·¥ç·¥á ·¥è“ì ·¥õ ú·¥á  Ä·¥á·¥ò ü…™·¥á·¥Ö ·¥ús·¥á Ä ·¥°…™·¥õ ú ·¥ú…¥…™·¥Ö·¥á·¥Ñ·¥è·¥Ö·¥á.", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))

@app.on_callback_query(filters.regex("unx_yt"))
async def cb_func_unxyt(_, query: CallbackQuery):
    await query.message.edit_text(text="‚Ü¨ /yt :  ü…™…¥·¥ã ·¥è Ä …¥·¥Ä·¥ç·¥á ·¥è“ì  è·¥è·¥ú·¥õ·¥ú ô·¥á ·¥†…™·¥Ö·¥á·¥è ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö.\n‚Ü¨ ·¥õ Ä è /yt mood lofi", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))
    
@app.on_callback_query(filters.regex("unx_editmode"))
async def cb_func_editmode(_, query: CallbackQuery):
    await query.message.edit_text(text="‚Ü¨ /editmode : ·¥á·¥Ö…™·¥õ·¥ç·¥è·¥Ö·¥á ·¥è…¥/·¥è“ì“ì ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥á·¥Ö…™·¥õ·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥á “ì Ä·¥è·¥ç …¢ Ä·¥è·¥ú·¥òs./n‚Ü¨ ·¥õ Ä è /editmode on/off", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))

@app.on_callback_query(filters.regex("ux_song"))
async def cb_func_song(_, query: CallbackQuery):
    await query.message.edit_text(text="‚Ü¨ /song : ·¥ús·¥á s·¥è…¥…¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥Ä…¥ è ·¥ç·¥ús…™·¥Ñ.\n‚Ü¨ ·¥õ Ä è /song mood lofi", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))

@app.on_callback_query(filters.regex("unx_webss"))
async def cb_func_webss(_, query: CallbackQuery):
    await query.message.edit_text(text="‚Ü¨ /webss : ·¥Ñ·¥Ä·¥ò·¥õ·¥ú Ä·¥ás ·¥Ä s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ ·¥è“ì ·¥õ ú·¥á …¢…™·¥†·¥á…¥ s…™·¥õ·¥á.\n‚Ü¨ ·¥õ Ä è /webss google.com", reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text=" ú·¥è·¥ç·¥á", callback_data="go_back_to_start")]]))

@app.on_callback_query(filters.regex("go_back_to_start"))
async def cb_func_back(_, query: CallbackQuery):
    check_user = collection.find_one({"user_id": query.from_user.id})
    if not check_user:
        add_user_database(query.from_user.id)
    await query.message.edit_text(text=f"""ü•Ä  ú·¥á è {query.from_user.mention},\n\n·¥õ ú…™s …™s {app.me.mention},\n·¥õ ú·¥á ·¥ç·¥ès·¥õ ·¥ús·¥á ü·¥áss ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç  ô·¥è·¥õ ·¥á·¥†·¥á Ä ·¥ç·¥Ä·¥Ö·¥á.""",        
        reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(text="·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥á üs·¥á  è·¥è·¥ú …¢·¥á è", url=f"https://t.me/{app.me.username}?startgroup=new")
                    ],
                    [
                        InlineKeyboardButton(text=" ú·¥á ü·¥ò", callback_data="help"),
                        InlineKeyboardButton(text="·¥è·¥°…¥·¥á Ä", user_id="6950368169")
                    ]
                ]
            )
    )
